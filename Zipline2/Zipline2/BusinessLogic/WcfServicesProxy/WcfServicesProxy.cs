using System;
using System.Collections.Generic;
using System.Text;
using System.ServiceModel;
using System.Threading.Tasks;
using Zipline2.Connected_Services;
using Zipline2.Models;

namespace Zipline2.BusinessLogic
{
    public class WcfServicesProxy
    {
        #region Singleton
        private static WcfServicesProxy instance = null;
        private static readonly object padlock = new object();
      
        public static WcfServicesProxy Instance
        {
            get
            {
                lock (padlock)
                {
                    if (instance == null)
                    {
                        instance = new WcfServicesProxy();
                    }
                    return instance;
                }
            }
        }
        #endregion

        //The current Windows Phone app has a Service Reference folder with references
        //to the services.  When the services are added, the classes with references
        //are autogenerated. Then the phone app just has the following:

        private PosServiceClient waiterClient;
        private CheckHostClient checkClient;
        private DBItem[] MenuItemsPizza;
        private DBItem[] MenuItemsCalzone;
        private DBItem[] MenuItemsSalads;
        private DBItem[] MenuItemsBeverages;
        private DBItem[] MenuItemsDessert;

        private WcfServicesProxy()
        {
            try
            {
                waiterClient = new PosServiceClient(
                     new BasicHttpBinding(),
                     new EndpointAddress("http://192.168.1.26/WP7Waiter/POServiceHost.svc"));

                checkClient = new CheckHostClient(
                     new BasicHttpBinding(),
                     new EndpointAddress("http://192.168.1.26/CheckHost/CheckHost.svc"));
            }

            catch (Exception ex)
            {
                var errorMessage = ex;
                throw;
            }
        }

        async public Task<Table> GetTableAsync()
        {
            
            DBTable dbTable;
            try
            {
                dbTable = await Task.Factory.FromAsync(
                    waiterClient.BeginGetTable,
                    waiterClient.EndGetTable,
                    1,
                    TaskCreationOptions.None);
            }
            catch (Exception ex)
            {
                var errormessage = ex;
                throw;
            }
            

            return FromWaiterService(dbTable); 
        }

        async public Task GetMenuAsync()
        {
            Dictionary<string, DBItem[]> menu = new Dictionary<string, DBItem[]>();
            try
            {
                menu = await Task.Factory.FromAsync(
                    waiterClient.BeginGetMenu,
                    waiterClient.EndGetMenu,
                    null,
                    TaskCreationOptions.None);
            }
            catch (Exception ex)
            {
                var errormessage = ex;
                throw;
            }

            MenuItemsPizza = menu["Pizza"];
            MenuItemsCalzone = menu["Calzone"];
            MenuItemsSalads = menu["Salads"];
            MenuItemsBeverages = menu["Beverages"];
            MenuItemsDessert = menu["Dessert"];

        }

        async public void SendOrder(Order orderToSend)
        {
            DBCheck dbCheck = new DBCheck();
            foreach (var orderItem in orderToSend.OrderItems)
            {
                if (orderItem is Pizza)
                {
                    dbCheck = GetPizzaDbCheck((Pizza)orderItem);
                    await CreateCheckAsync(dbCheck);
                }
            }
        }
        private GuestItem CreatePizzaGuestItem()
        {
            GuestItem guestItem = new GuestItem(); 
            if (MenuItemsPizza != null)
            {
                foreach (var dbItem in MenuItemsPizza)
                {
                    guestItem = new GuestItem()
                    {
                        Availability = dbItem.Availability,
                        CanBeHalf = dbItem.CanBeHalf,
                        Description = dbItem.Description,
                        HasAllMods = dbItem.HasAllMods,
                        HasRequiredMods = dbItem.HasRequiredMods,
                        ID = dbItem.ID,
                        LongName = dbItem.LongName,
                        NonTaxable = dbItem.NonTaxable,
                        ShortName = dbItem.ShortName,
                        SelectCommand = dbItem.SelectCommand,
                        SizeTable = dbItem.SizeTable,
                        Stackable = dbItem.Stackable,
                        SubCategoryID = dbItem.SubCategoryID,
                        SubCategoryName = dbItem.SubCategoryName,
                        SuperCategory = dbItem.SuperCategory,
                        SuperCategoryID = dbItem.SuperCategoryID,
                        TieredPricing = dbItem.TieredPricing
                    };
                    if (dbItem.ID == 57)
                    {
                        guestItem.OrderSent = false;
                        guestItem.Stackable = dbItem.Stackable;
                        guestItem.SubCategoryID = dbItem.SubCategoryID;
                        guestItem.SubCategoryName = dbItem.SubCategoryName;
                        guestItem.OrderID = -1;
                        guestItem.Mods = new List<GuestModifier>();
                        guestItem.Note = new List<string>();
                        break;
                    }
                }
            }
           
            return guestItem;
        }
        private DBCheck GetPizzaDbCheck(Pizza pizza)
        {
            decimal guestID = Decimal.Parse(Users.Instance.LoggedInUser.UserId.ToString());
            DBCheck check = new DBCheck()
            {
                ComboItems = new[] { new GuestComboItem() },
                Discounts = new[] { new OrderDiscount() },
                GuestIDs = new[] { guestID },
                Name = string.Empty,
                Notes = new DBNotes()
            };

            GuestItem guestItem = null;
            switch (pizza.PizzaType)
            {
                //TODO: GuestComboItems
                case Enums.PizzaType.Medium:
                    guestItem = CreatePizzaGuestItem();
                    guestItem.SelectSizeID = 11;
                    break;
                case Enums.PizzaType.Large:
                    guestItem = CreatePizzaGuestItem();
                    guestItem.SelectSizeID = 12;
                    break;
                case Enums.PizzaType.ThinSlice:
                    guestItem = CreatePizzaGuestItem();
                    guestItem.SelectSizeID = 9;
                    break;
                case Enums.PizzaType.Indy:
                    guestItem = CreatePizzaGuestItem();
                    guestItem.SelectSizeID = 10;
                    break;
            }
            check.Items = new[] { guestItem };
            //pizzaItem.Items.Add(comboGuestItem);
            return check;
        }

        async public Task CreateCheckAsync(DBCheck dbCheck)
        {
            var dbChecks = new DBCheck[]
            {
                dbCheck
            };
            try
            {
                decimal userIdDecimal = decimal.Parse(Users.Instance.LoggedInUser.UserId.ToString());
                var result = await Task.Factory.FromAsync(
                    checkClient.BeginCreateChecks,
                    checkClient.EndCreateChecks,
                    dbChecks, userIdDecimal, false,
                    TaskCreationOptions.None);
            }
            catch (Exception ex)
            {
                var errormessage = ex;
                throw;
            }
        }

        static Table FromWaiterService(DBTable dbTable)
        {
            return new Table
            {
                IsOccupied = !(dbTable.IsClear),
                TableName = dbTable.Name
            };
        }

       

      
    }
}
