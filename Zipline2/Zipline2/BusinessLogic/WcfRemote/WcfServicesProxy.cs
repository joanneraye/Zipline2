using System;
using System.Collections.Generic;
using System.Text;
using System.ServiceModel;
using System.Threading.Tasks;
using Zipline2.ConnectedServices;
using Zipline2.Models;
using Staunch.POS.Classes;

namespace Zipline2.BusinessLogic.WcfRemote
{
    
    public class WcfServicesProxy
    {

        private int counter = 0;



        #region Singleton
        private static WcfServicesProxy instance = null;
        private static readonly object padlock = new object();
      
        public static WcfServicesProxy Instance
        {
            get
            {
                lock (padlock)
                {
                    if (instance == null)
                    {
                        instance = new WcfServicesProxy();
                    }
                    return instance;
                }
            }
        }

        
        #endregion

        //The current Windows Phone app has a Service Reference folder with references
        //to the services.  When the services are added, the classes with references
        //are autogenerated. Then the phone app just has the following:

        private PosServiceClient waiterClient;
        private CheckHostClient checkClient;
        
        //public Dictionary<decimal, DBItem> MenuItemsPizza { get; private set; }
        //public Dictionary<decimal, DBItem> MenuItemsCalzone { get; private set; }
        //public Dictionary<decimal, DBItem> MenuItemsSalads { get; private set; }
        //public Dictionary<decimal, DBItem> MenuItemsBeverages { get; private set; }
        //public Dictionary<decimal, DBItem> MenuItemsDessert { get; private set; }
        private decimal UserIdDecimal;

        private WcfServicesProxy()
        {
            if (Users.Instance.LoggedInUser != null)
            {
                UserIdDecimal = Users.Instance.LoggedInUser.UserId;
            }
          
            try
            {
                waiterClient = new PosServiceClient(
                     new BasicHttpBinding(),
                     new EndpointAddress("http://192.168.1.26/WP7Waiter/POServiceHost.svc"));

                checkClient = new CheckHostClient(
                     new BasicHttpBinding(),
                     new EndpointAddress("http://192.168.1.26/CheckHost/CheckHost.svc"));
            }

            catch (Exception ex)
            {
                var errorMessage = ex;
                throw;
            }
        }

        public void UpdateTableSync(DBTable currentTable)
        {
            List<DBTable> tablesToUpdate = new List<DBTable> { currentTable };
            waiterClient.UpdateTables(tablesToUpdate, (decimal)Users.Instance.LoggedInUser.UserId);
        }

        async public Task UpdateTableAsync(DBTable currentTable)
        {

            List<DBTable> tablesToUpdate = new List<DBTable> { currentTable };
            await Task.Factory.FromAsync(
                waiterClient.BeginUpdateTables,
                waiterClient.EndUpdateTables,
                tablesToUpdate,
                (decimal)Users.Instance.LoggedInUser.UserId,
                TaskCreationOptions.None);
        }

        public DBTable GetTableSync(int tableNum)
        {
            try
            {
                return waiterClient.GetTable(tableNum);
            }
            catch (Exception e)
            {
             waiterClient.GetTablesForSection(1);   Exception error = e;
                throw;
            }
        }

        public void GetTablesSync()
        {
            DataBaseDictionaries.DbTablesDictionary = new Dictionary<decimal, DBTable>();
            List<DBTable> tablesSection1 = waiterClient.GetTablesForSection(1);
            foreach (var item1 in tablesSection1)
            {
                DataBaseDictionaries.DbTablesDictionary.Add(item1.ID, item1);
            }
            List<DBTable> tablesSection2 = waiterClient.GetTablesForSection(2);
            foreach (var item2 in tablesSection2)
            {
                DataBaseDictionaries.DbTablesDictionary.Add(item2.ID, item2);
            }
        }

        async public Task<DBTable> GetTableAsync(int tableNum)
        {
                return await Task.Factory.FromAsync(
                    waiterClient.BeginGetTable,
                    waiterClient.EndGetTable,
                    tableNum,
                    TaskCreationOptions.None);
        }

        async public Task<List<DBModGroup>> GetToppingsAsync()
        {
           return await Task.Factory.FromAsync(
                waiterClient.BeginGetAllMods,
                waiterClient.EndGetAllMods,
                (decimal)57,
                (decimal)12,
                TaskCreationOptions.None);

        }

       
        public void GetMenuSync()
        {
            try
            {
                DataBaseDictionaries.MenuDictionary = waiterClient.GetMenu();
            }
            catch (Exception ex)
            {
                var errormessage = ex;
                throw;
            }
        }

        async public Task GetMenuAsync()
        {
            DataBaseDictionaries.MenuDictionary = new Dictionary<string, List<DBItem>>();
            try
            {
                DataBaseDictionaries.MenuDictionary = await Task.Factory.FromAsync(
                    waiterClient.BeginGetMenu,
                    waiterClient.EndGetMenu,
                    null,
                    TaskCreationOptions.None);
            }
            catch (Exception ex)
            {
                var errormessage = ex;
                throw;
            }
        }

        async public Task<decimal> GetNextGuestIdAsync()
        {
            List<decimal> ids = await Task.Factory.FromAsync(
                waiterClient.BeginGetNextGuestIDs,
                waiterClient.EndGetNextGuestIDs,
                1,
                UserIdDecimal,
                TaskCreationOptions.None);
            if (ids.Count > 0)
            {
                return ids[0];
            }
            return 0;
        }

        public decimal GetNextGuestIdSync()
        {
            List<decimal> ids = waiterClient.GetNextGuestIDs(1, UserIdDecimal);
            if (ids.Count > 0)
            {
                return ids[0];
            }
            return 0;
        }

        public void UpdateOrderSync(Order orderToUpdate)
        {
            counter = counter + 1;
           
            DBTable dbTableCurrent = ConvertOrderToDbTable(orderToUpdate, false);

            //Update the database table with built DBTable in order to obtain new OrderID.
            //await UpdateTableAsync(dbTableCurrent);
            UpdateTableSync(dbTableCurrent);
        }

        internal DBTable ConvertOrderToDbTable(Order orderToSend, bool sendOrderToKitchen = false)
        {
            List<decimal> guestIds = GetGuestIdsSync(orderToSend.TableId);
            //decimal guestId = await GetGuestIdAsync(orderToUpdate.TableId);

            //Get stored DBTable.
            DBTable newTable = DataBaseDictionaries.DbTablesDictionary[orderToSend.TableId];

            //Create Guest_DBs for table Guests.
            bool first = true;
            foreach (decimal id in guestIds)
            {
                Staunch.POS.Classes.Guest_DB guest = new Staunch.POS.Classes.Guest_DB();
                guest.ID = id;
                guest.CheckedOut = false;
                guest.Items = new List<GuestItem>();
                guest.ComboItems = new List<GuestComboItem>();
                guest.TableID = orderToSend.TableId;

                if (first)
                {
                    guest.IsWhole = true;
                    first = false;
                }

                //TODO:  Too many guests are added to table - not sure why....
                newTable.Guests.Add(guest);
            }

            if (DataBaseDictionaries.MenuDictionary != null &&
                DataBaseDictionaries.MenuDictionary.Count > 0)
            {
                //Create DBItems for Guest_DB object.
                foreach (var orderItem in orderToSend.OrderItems)
                {
                    var keysTuple = orderItem.GetMenuDbItemKeys();
                    var dbItem = new DBItem();
                    bool menuItemFound = false;

                    //Use the item from the Database Dictionary.                    
                    foreach (var menuItem in DataBaseDictionaries.MenuDictionary[keysTuple.Item1])
                    {
                        if (menuItem.ID == keysTuple.Item2)
                        {
                            dbItem = menuItem;
                            menuItemFound = true;
                            break;
                        }
                    }
                    if (orderItem.DbOrderId <= 0)
                    {
                        orderItem.DbOrderId = -1;
                    }
                    if (menuItemFound)
                    {
                        GuestItem guestItem = orderItem.CreateGuestItem(dbItem, orderItem.DbOrderId);
                        guestItem.Mods = orderItem.CreateMods();
                        guestItem.OrderSent = sendOrderToKitchen;
                        newTable.Guests[0].Items.Add(guestItem);
                        //Pricing check - TODO:  Take out for production??
                        GuestItem databaseGuestItem = checkClient.PriceOrder(guestItem);
                        if (databaseGuestItem.Price != guestItem.Price)
                        {
                            Console.WriteLine("JOANNE LOG:  price differs for " + guestItem.ShortName);
                        }
                    }
                }
            }
            return newTable;
        }


        async public void UpdateOrderAsync(Order orderToUpdate)
        {
            counter = counter + 1;
            //decimal guestId = await GetGuestIdAsync(orderToUpdate.TableId);
            DBTable dbTableCurrent = ConvertOrderToDbTable(orderToUpdate, false);

            //Update the database table with built DBTable in order to obtain new OrderID.
            //await UpdateTableAsync(dbTableCurrent);
            await UpdateTableAsync(dbTableCurrent);
        }

        private List<decimal> GetGuestIdsSync(decimal tableId)
        {
            DBTable thisTable = GetTableSync((int)tableId);
            List<decimal> guestIds = new List<decimal>();
            if (thisTable.Guests.Count > 1)
            {
                guestIds.Add(thisTable.Guests[0].ID);
                guestIds.Add(thisTable.Guests[1].ID);
            }
            else
            {
                guestIds = waiterClient.GetNextGuestIDs((2), UserIdDecimal);
            }
            return guestIds;
        }

        async private Task<List<decimal>> GetGuestIdsAsync(decimal tableId)
        {
            DBTable thisTable = await GetTableAsync((int)tableId);
            List<decimal> guestIds = new List<decimal>();
            if (thisTable.Guests.Count > 1)
            {
                guestIds.Add(thisTable.Guests[0].ID);
                guestIds.Add(thisTable.Guests[1].ID);
            }
            else
            {
                guestIds = waiterClient.GetNextGuestIDs((2), UserIdDecimal);
            }
            return guestIds;

        }

        public List<DBTable> GetTableInfoFromServer()
        {
            return waiterClient.GetTableSummary();
        }

        public void SendOrderSync(Order orderToSend)
        {
            DBTable dbTableCurrent = ConvertOrderToDbTable(orderToSend, true);

            //Update the database table with built DBTable in order to obtain new OrderID.
            //await UpdateTableAsync(dbTableCurrent);
            UpdateTableSync(dbTableCurrent);

            //Get the table just updated - will contain new OrderID.
            DBTable updatedTable = GetTableSync((int)dbTableCurrent.ID);

            //See if outstanding checks for this table.
            List<DBCheck> checks = GetOpenChecksSync(dbTableCurrent.ID);
            decimal checkId = -1;
            if (checks.Count > 0)
            {
                checkId = checks[0].ID;
            }

            DBCheck newDbCheck = new DBCheck(checkId);


            List<decimal> orderIDs = new List<decimal>();

            //Get items for check from updated Table just retrieved.
            foreach (GuestItem item in updatedTable.Guests[0].Items)
            {
                if (!item.OrderSent)
                {
                    orderIDs.Add(item.OrderID);
                    newDbCheck.Items.Add(item);
                }
            }
            foreach (GuestComboItem combo in updatedTable.Guests[0].ComboItems)
            {
                bool first = true;
                foreach (GuestItem gItem in combo.ComboGuestItems)
                {
                    if (!gItem.OrderSent)
                    {
                        orderIDs.Add(gItem.OrderID);
                        if (first)
                        {
                            first = false;
                            newDbCheck.ComboItems.Add(combo);
                        }
                    }
                }
            }

            //Create and add check to database.
            CreateCheckSync(newDbCheck);
            SendOrdersToServerSync(orderIDs, UserIdDecimal);
        }

        async public void SendOrdersToServerAsync(List<decimal> orderIds, decimal userId)
        {
            await Task.Factory.FromAsync(
                waiterClient.BeginSendOrders,
                waiterClient.EndSendOrders,
                orderIds,
                userId,
                TaskCreationOptions.None);
        }

        public void SendOrdersToServerSync(List<decimal> orderIds, decimal userId)
        {
            waiterClient.SendOrders(orderIds, userId);
        }

        async public void SendOrderAsync(Order orderToSend)
        {
            DBTable dbTableCurrent = ConvertOrderToDbTable(orderToSend, true);

            //Update the database table with built DBTable in order to obtain new OrderID.
            //await UpdateTableAsync(dbTableCurrent);
            await UpdateTableAsync(dbTableCurrent);

            //Get the table just updated - will contain new OrderID.
            DBTable updatedTable = await GetTableAsync((int)dbTableCurrent.ID);

            //See if outstanding checks for this table.
            List<DBCheck> checks = await GetOpenChecksAsync(dbTableCurrent.ID);
            decimal checkId = -1;
            if (checks.Count > 0)
            {
                checkId = checks[0].ID;
            }

            DBCheck newDbCheck = new DBCheck(checkId);

            List<decimal> orderIDs = new List<decimal>();

            //Get items for check from updated Table just retrieved.
            foreach (GuestItem item in updatedTable.Guests[0].Items)
            {
                if (!item.OrderSent)
                {
                    orderIDs.Add(item.OrderID);
                    newDbCheck.Items.Add(item);
                }
            }
            foreach (GuestComboItem combo in updatedTable.Guests[0].ComboItems)
            {
                bool first = true;
                foreach (GuestItem gItem in combo.ComboGuestItems)
                {
                    if (!gItem.OrderSent)
                    {
                        orderIDs.Add(gItem.OrderID);
                        if (first)
                        {
                            first = false;
                            newDbCheck.ComboItems.Add(combo);
                        }
                    }
                }
            }

            //Create and add check to database.
            await CreateCheckAsync(newDbCheck);
            SendOrdersToServerAsync(orderIDs, UserIdDecimal);
        }

        

        public DBUser GetUserSync(string pin)
        {
            DBUser thisUser =  waiterClient.GetUser(pin);
            return thisUser;
        }

        //async public Task<DBUser> GetUserAsync(string pin)
        //{
        //    return await Task.Factory.FromAsync(
        //            waiterClient.BeginGetUser,
        //            waiterClient.EndGetUser,
        //            pin,
        //            TaskCreationOptions.None);
        //}

        async public Task<List<DBTable>> GetTablesForSectionAsync(decimal sectionID)
        {
            return await Task.Factory.FromAsync(
                waiterClient.BeginGetTablesForSection,
                waiterClient.EndGetTablesForSection,
                sectionID,
                TaskCreationOptions.None);
        }

        async public Task<bool> HasOpenChecksAsync(decimal tableId)
        {
            return await Task.Factory.FromAsync(
                checkClient.BeginHasOpenChecks,
                checkClient.EndHasOpenChecks,
                tableId,
                TaskCreationOptions.None);

        }

        async public Task<List<DBCheck>> GetOpenChecksAsync(decimal tableId)
        {
            return await Task.Factory.FromAsync(
                checkClient.BeginGetOpenChecks,
                checkClient.EndGetOpenChecks,
                tableId,
                TaskCreationOptions.None);
        }

        public List<DBCheck> GetOpenChecksSync(decimal tableId)
        {
            return checkClient.GetOpenChecks(tableId);
        }

        public void CreateCheckSync(DBCheck dbCheck)
        {
            var dbChecks = new List<DBCheck>()
            {
                dbCheck
            };
            try
            {
                checkClient.CreateChecks(dbChecks, UserIdDecimal, false);
            }
            catch (Exception ex)
            {
                var errormessage = ex;
                throw;
            }
        }


        async public Task CreateCheckAsync(DBCheck dbCheck)
        {
            var dbChecks = new List<DBCheck>()
            {
                dbCheck
            };
            try
            {
                var result = await Task.Factory.FromAsync(
                    checkClient.BeginCreateChecks,
                    checkClient.EndCreateChecks,
                    dbChecks,UserIdDecimal, false,
                    TaskCreationOptions.None);
            }
            catch (Exception ex)
            {
                var errormessage = ex;
                throw;
            }
        }
    }
}
