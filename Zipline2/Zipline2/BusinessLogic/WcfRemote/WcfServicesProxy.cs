using System;
using System.Collections.Generic;
using System.Text;
using System.ServiceModel;
using System.Threading.Tasks;
using Zipline2.Connected_Services;
using Zipline2.Models;
using Staunch.POS.Classes;

namespace Zipline2.BusinessLogic.WcfRemote
{
    
    public class WcfServicesProxy
    {

        private int counter = 0;



        #region Singleton
        private static WcfServicesProxy instance = null;
        private static readonly object padlock = new object();
      
        public static WcfServicesProxy Instance
        {
            get
            {
                lock (padlock)
                {
                    if (instance == null)
                    {
                        instance = new WcfServicesProxy();
                    }
                    return instance;
                }
            }
        }

        
        #endregion

        //The current Windows Phone app has a Service Reference folder with references
        //to the services.  When the services are added, the classes with references
        //are autogenerated. Then the phone app just has the following:

        private PosServiceClient waiterClient;
        private CheckHostClient checkClient;
        
        //public Dictionary<decimal, DBItem> MenuItemsPizza { get; private set; }
        //public Dictionary<decimal, DBItem> MenuItemsCalzone { get; private set; }
        //public Dictionary<decimal, DBItem> MenuItemsSalads { get; private set; }
        //public Dictionary<decimal, DBItem> MenuItemsBeverages { get; private set; }
        //public Dictionary<decimal, DBItem> MenuItemsDessert { get; private set; }
        private decimal UserIdDecimal;

        private WcfServicesProxy()
        {
            if (Users.Instance.LoggedInUser != null)
            {
                UserIdDecimal = Users.Instance.LoggedInUser.UserId;
            }
          
            try
            {
                waiterClient = new PosServiceClient(
                     new BasicHttpBinding(),
                     new EndpointAddress("http://192.168.1.26/WP7Waiter/POServiceHost.svc"));

                checkClient = new CheckHostClient(
                     new BasicHttpBinding(),
                     new EndpointAddress("http://192.168.1.26/CheckHost/CheckHost.svc"));
            }

            catch (Exception ex)
            {
                var errorMessage = ex;
                throw;
            }
        }

        async public Task UpdateTableAsync(DBTable currentTable)
        {

            DBTable[] tablesToUpdate = new DBTable[] { currentTable };
            await Task.Factory.FromAsync(
                waiterClient.BeginUpdateTables,
                waiterClient.EndUpdateTables,
                tablesToUpdate,
                (decimal)Users.Instance.LoggedInUser.UserId,
                TaskCreationOptions.None);
        }
       
        async public Task<DBTable> GetTableAsync(int tableNum)
        {
            
            DBTable dbTable;
            try
            {
                dbTable = await Task.Factory.FromAsync(
                    waiterClient.BeginGetTable,
                    waiterClient.EndGetTable,
                    tableNum,
                    TaskCreationOptions.None);
            }
            catch (Exception ex)
            {
                var errormessage = ex;
                throw;
            }

            return dbTable;
            //return FromWaiterService(dbTable); 
        }

        async public Task<DBModGroup[]> GetToppingsAsync()
        {
           return await Task.Factory.FromAsync(
                waiterClient.BeginGetAllMods,
                waiterClient.EndGetAllMods,
                (decimal)57,
                (decimal)12,
                TaskCreationOptions.None);

        }

        async public Task GetMenuAsync()
        {
            DataBaseDictionaries.MenuDictionary = new Dictionary<string, DBItem[]>();
            try
            {
                DataBaseDictionaries.MenuDictionary = await Task.Factory.FromAsync(
                    waiterClient.BeginGetMenu,
                    waiterClient.EndGetMenu,
                    null,
                    TaskCreationOptions.None);
            }
            catch (Exception ex)
            {
                var errormessage = ex;
                throw;
            }
            //foreach (var dbItem in menu["Pizza"])
            //{
            //    orderItem.MenuItems.Add(dbItem.ID, dbItem);
            //}
            //foreach (var dbItem in menu["Calzone"])
            //{
            //    MenuItemsPizza.Add(dbItem.ID, dbItem);
            //}
            //MenuItemsPizza = menu["Pizza"];
            //MenuItemsCalzone = menu["Calzone"];
            //MenuItemsSalads = menu["Salads"];
            //MenuItemsBeverages = menu["Beverages"];
            //MenuItemsDessert = menu["Dessert"];

        }

        async public Task<decimal> GetNextGuestIdAsync()
        {
            decimal[] ids = await Task.Factory.FromAsync(
                waiterClient.BeginGetNextGuestIDs,
                waiterClient.EndGetNextGuestIDs,
                1,
                UserIdDecimal,
                TaskCreationOptions.None);
            if (ids.Length > 0)
            {
                return ids[0];
            }
            return 0;
        }

        async public void UpdateOrderAsync(Order orderToUpdate)
        {
            counter = counter + 1;
            decimal guestId = await GetGuestIdAsync(orderToUpdate.TableId);
            DBTable dbTableCurrent = DataConversion.ConvertOrderToDbTable(orderToUpdate, guestId, false);

            //Update the database table with built DBTable in order to obtain new OrderID.
            await UpdateTableAsync(dbTableCurrent);
        }

        async private Task<decimal> GetGuestIdAsync(decimal tableId)
        {
            DBTable thisTable = await GetTableAsync((int)tableId);
            if (thisTable.Guests.Count > 0)
            {
                return thisTable.Guests[0].ID;
            }
            else
            {
                return await WcfServicesProxy.Instance.GetNextGuestIdAsync();
            }

        }

        async public void SendOrderAsync(Order orderToSend)
        {
            decimal guestId;
            if (orderToSend.GuestId != 0)
            {
                guestId = orderToSend.GuestId;
            }
            else
            {
                guestId = await GetGuestIdAsync(orderToSend.TableId);
            }
            DBTable dbTableCurrent = DataConversion.ConvertOrderToDbTable(orderToSend, guestId, true);

            //Update the database table with built DBTable in order to obtain new OrderID.
            await UpdateTableAsync(dbTableCurrent);

            //Get the table just updated - will contain new OrderID.
            DBTable updatedTable = await GetTableAsync((int)dbTableCurrent.ID);

            //Get the GuestItem obejcts from the DBTable object needed for the DBCheck.
            List<GuestItem> items = updatedTable.Guests[0].Items;
            DBCheck dbCheck = new DBCheck()
            {
                ID = orderToSend.TableId,
                ComboItems = new List<GuestComboItem>(),
                Discounts = new List<OrderDiscount>(),
                GuestIDs = new List<decimal>(),
                Name = string.Empty,
                Notes = new DBNotes(),
                Items = items
            };

            //Creates and adds check to database.
            await CreateCheckAsync(dbCheck);
        }

        

        async public Task<DBUser> GetUserAsync(string pin)
        {
            return await Task.Factory.FromAsync(
                   waiterClient.BeginGetUser,
                   waiterClient.EndGetUser,
                   pin,                
                   TaskCreationOptions.None);
        }

        async public Task<DBTable[]> GetTablesForSectionAsync(decimal sectionID)
        {
            return await Task.Factory.FromAsync(
                waiterClient.BeginGetTablesForSection,
                waiterClient.EndGetTablesForSection,
                sectionID,
                TaskCreationOptions.None);
        }

        async public Task<bool> HasOpenChecksAsync(decimal tableId)
        {
            return await Task.Factory.FromAsync(
                checkClient.BeginHasOpenChecks,
                checkClient.EndHasOpenChecks,
                tableId,
                TaskCreationOptions.None);

        }

        async public Task<DBCheck[]> GetOpenChecksAsync(decimal tableId)
        {
            return await Task.Factory.FromAsync(
                checkClient.BeginGetOpenChecks,
                checkClient.EndGetOpenChecks,
                tableId,
                TaskCreationOptions.None);
        }




        async public Task CreateCheckAsync(DBCheck dbCheck)
        {
            var dbChecks = new DBCheck[]
            {
                dbCheck
            };
            try
            {
                var result = await Task.Factory.FromAsync(
                    checkClient.BeginCreateChecks,
                    checkClient.EndCreateChecks,
                    dbChecks,UserIdDecimal, false,
                    TaskCreationOptions.None);
            }
            catch (Exception ex)
            {
                var errormessage = ex;
                throw;
            }
        }
    }
}
